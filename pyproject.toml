[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "tiny-audio"
version = "0.1.0"
description = "Learn ASR by Building One - A minimal speech recognition model combining HuBERT with Qwen3-8B"
authors = ["Alex Kroman <alex@alexkroman.com>"]
license = "MIT"
readme = "README.md"
keywords = ["speech-recognition", "asr", "hubert", "qwen3", "transformers", "deep-learning", "education"]
homepage = "https://github.com/alexkroman/tiny-audio"
repository = "https://github.com/alexkroman/tiny-audio"
documentation = "https://github.com/alexkroman/tiny-audio#readme"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
packages = [{include = "src"}]
include = ["*.json", "*.yaml", "*.yml"]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/alexkroman/tiny-audio/issues"

[[tool.poetry.source]]
name = "pytorch-cu128"
url = "https://download.pytorch.org/whl/cu128"
priority = "supplemental"

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
# torch and torchcodec - Poetry will pull from pytorch-cu128 source on Linux when available
torch = "~2.8.0"
torchcodec = "~0.7.0"
transformers = "*"
accelerate = "*"
datasets = {extras = ["audio"], version = ">=3.0.0"}
peft = "*"
evaluate = "*"
jiwer = "*"
wandb = "*"
numpy = "*"
hydra-core = "*"
omegaconf = "*"
hf-transfer = "*"
ninja = "*"
gradio = "*"
assemblyai = "*"
typer = ">=0.19.2"

[tool.poetry.group.dev.dependencies]
pytest = ">=8.0.0"
black = ">=2.3.0"
ruff = ">=0.1.0"
mypy = ">=1.5.0"
mdformat = ">=0.7.0"

[tool.poetry.scripts]
# Model scripts (use: poetry run python src/train.py for training due to Hydra config paths)
eval = "scripts.eval:main"
push-to-hub = "scripts.push_to_hub:main"
run-handler = "scripts.run_handler_local:main"

# Deployment scripts
deploy-hf = "scripts.deploy_to_hf_space:main"
deploy-runpod = "scripts.deploy_runpod:main"
remote-train = "scripts.start_remote_training:main"
attach-remote = "scripts.attach_remote_session:main"

# Development tools
lint = "scripts.dev_tools:lint"
format = "scripts.dev_tools:format_code"
format-md = "scripts.dev_tools:format_markdown"
type-check = "scripts.dev_tools:type_check"
test = "scripts.dev_tools:test"
check = "scripts.dev_tools:check_all"

[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true

[tool.mypy]
python_version = "3.11"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true
# Ignore specific error codes that are library-related
disable_error_code = ["assignment", "override", "call-overload", "arg-type", "index", "union-attr"]

[[tool.mypy.overrides]]
module = "transformers.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "peft.*"
ignore_errors = true

[tool.pytest.ini_options]
# Test discovery patterns
python_files = "test_*.py *_test.py"
python_classes = "Test*"
python_functions = "test_*"

# Default options
addopts = "-v -s --tb=short"

# Test paths
testpaths = ["tests"]

# Ignore directories
norecursedirs = ["outputs", ".venv", "venv", ".git", "__pycache__", "*.egg-info"]

# Asyncio configuration to fix deprecation warning
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"

[tool.ruff]
line-length = 100
target-version = "py38"
extend-exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
    "*.egg-info",
    ".mypy_cache",
    ".pytest_cache",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "UP", # pyupgrade
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "ISC", # flake8-implicit-str-concat
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
]
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "B905",  # zip() without an explicit strict= parameter
]

[tool.mdformat]
wrap = 100
number = false

